{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","utils/reducers.js","utils/actions.js","utils/GlobalState.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","length","map","purchaseQuantity","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","ProductItem","item","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","setCategory","categoryData","id","CartItem","placeholder","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","Cart","toggleCart","sum","toFixed","calculateTotal","Auth","loggedIn","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","variables","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5adc411c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export function pluralize(name, count) {\r\n  if (count === 1) {\r\n    return name\r\n  }\r\n  return name + 's'\r\n}\r\n\r\n\r\n// remember indexedDb is async\r\n// we will open db connection, create object store, run the 'transaction'\r\nexport function idbPromise (storeName, method, object) {\r\n  return new Promise ((resolve, reject) => {\r\n\r\n    // open connection to db with version 1\r\n    const request = window.indexedDB.open('shop-shop', 1);\r\n\r\n    // create variables to refer to db, transaction and object store\r\n    // db = database, tx = transaction, store = object store\r\n    let db, tx, store;\r\n\r\n\r\n    // if version changes, or its first time using database, run function\r\n    // it will create object store to cache data in \r\n    request.onupgradeneeded = function(e) {\r\n      \r\n      const db = request.result;\r\n\r\n      // will create an object store for each set of data\r\n      // we'll set primary key to be _id\r\n      db.createObjectStore('products', { keyPath: '_id' });\r\n      db.createObjectStore('categories', { keyPath: '_id' });\r\n      db.createObjectStore('cart', { keyPath: '_id' });\r\n    };\r\n\r\n\r\n    // implement error handling\r\n    request.onerror = function(e) {\r\n      console.log('There was an error');\r\n    };\r\n\r\n\r\n\r\n    // now, when database is open, we will create functionality\r\n    request.onsuccess = function(e) {\r\n      \r\n      // save reference of db to db variable\r\n      db = request.result;\r\n\r\n      // open transaction when we pass something to store\r\n      // do NOT camelCase readwrite, I always do this\r\n      tx = db.transaction (storeName, 'readwrite');\r\n\r\n      // save reference to object store\r\n      store = tx.objectStore(storeName);\r\n\r\n      // error handling\r\n      db.onerror = function(e) {\r\n        console.log('error', e);\r\n      };\r\n\r\n\r\n      // we must write CRUD operations for idbPromise\r\n      switch (method) {\r\n\r\n        // PUT REQUEST \r\n        // runs put method on object store\r\n        case 'put':\r\n          store.put(object);\r\n          resolve(object);\r\n          break;\r\n\r\n        \r\n        // GET REQUEST\r\n        // get all the data from the store\r\n        case 'get':\r\n          const all = store.getAll();\r\n          all.onsuccess = function() {\r\n            resolve(all.result);\r\n          };\r\n          break;\r\n\r\n        // DELETE REQUEST\r\n        // runs delete method on object with matching _id\r\n        case 'delete':\r\n          store.delete(object._id);\r\n          break;\r\n\r\n\r\n        // error handling\r\n        default:\r\n          console.log('No valid method');\r\n          break;\r\n      }\r\n\r\n      // once transaction is complete, close db connection\r\n      tx.oncomplete = function() {\r\n        db.close();\r\n      };\r\n    };\r\n\r\n\r\n  });\r\n}\r\n","import {\r\n    UPDATE_PRODUCTS,\r\n    UPDATE_CATEGORIES,\r\n    UPDATE_CURRENT_CATEGORY,\r\n    ADD_TO_CART,\r\n    ADD_MULTIPLE_TO_CART,\r\n    REMOVE_FROM_CART,\r\n    UPDATE_CART_QUANTITY,\r\n    CLEAR_CART,\r\n    TOGGLE_CART\r\n} from \"./actions\";\r\n\r\nimport { useReducer } from 'react';\r\n  \r\nexport const reducer = (state, action) => {\r\n    switch (action.type) {\r\n        // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\r\n        case UPDATE_PRODUCTS:\r\n            return {\r\n                ...state,\r\n                products: [...action.products],\r\n            };\r\n        // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\r\n        case UPDATE_CATEGORIES:\r\n            return {\r\n                ...state,\r\n                categories: [...action.categories]\r\n            };\r\n\r\n        case UPDATE_CURRENT_CATEGORY:\r\n            return {\r\n                ...state,\r\n                currentCategory: action.currentCategory\r\n            };\r\n        \r\n        case ADD_TO_CART:\r\n            return {\r\n                ...state,\r\n                cartOpen: true,\r\n                // we add action.product to end of state cart array\r\n                cart: [...state.cart, action.product]\r\n            };\r\n\r\n        case ADD_MULTIPLE_TO_CART:\r\n            return {\r\n                ...state,\r\n                cart: [...state.cart, ...action.products],\r\n            };\r\n\r\n        // if it's none of these actions, do not update state at all and keep things the same!\r\n        default:\r\n        return state;\r\n\r\n        case REMOVE_FROM_CART:\r\n            let newState = state.cart.filter(product => {\r\n                return product._id !== action._id;\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n                cartOpen: newState.length > 0,\r\n                cart: newState\r\n            };\r\n\r\n        case UPDATE_CART_QUANTITY:\r\n            return {\r\n                ...state,\r\n                cartOpen: true,\r\n                // we use .map to create a new array\r\n                // remember, state is IMMUTABLE\r\n                cart: state.cart.map(product => {\r\n                if (action._id === product._id) {\r\n                    product.purchaseQuantity = action.purchaseQuantity;\r\n                }\r\n                return product;\r\n                })\r\n            };\r\n\r\n        case CLEAR_CART:\r\n            return {\r\n                ...state,\r\n                cartOpen: false,\r\n                cart: []\r\n            };\r\n        \r\n        case TOGGLE_CART:\r\n            return {\r\n                ...state,\r\n                cartOpen: !state.cartOpen\r\n            };\r\n\r\n        \r\n    }\r\n};\r\n\r\n// we export as useProductReducer, this will initialize global state object\r\nexport function useProductReducer(initialState) {\r\n    // we use our reducer that we created, and pass in initial state as well\r\n    return useReducer(reducer, initialState);\r\n}","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\r\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\r\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\r\nexport const ADD_TO_CART = 'ADD_TO_CART';\r\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\r\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\r\nexport const CLEAR_CART = 'CLEAR_CART';\r\nexport const TOGGLE_CART = 'TOGGLE_CART';","\r\n// import function to instantiate Context object\r\n// import React Hook to use state from Context object\r\nimport React, { createContext, useContext } from \"react\";\r\n\r\n\r\n// we import our reducer we created\r\nimport { useProductReducer } from './reducers';\r\n\r\n\r\n// instantiate global Context object\r\nconst StoreContext = createContext();\r\n\r\n// Context objects have a Provider and Consumer\r\n// Provider takes state data that's passed into it and \r\n// allows components to use it as props\r\n// Consumer grabs and uses data from Provider\r\nconst { Provider } = StoreContext;\r\n\r\n\r\n// instantiate global state with useProductReducer\r\nconst StoreProvider = ({ value = [], ...props }) => {\r\n    const [state, dispatch] = useProductReducer({\r\n        products: [],\r\n        cart: [],\r\n        cartOpen: false,\r\n        categories: [],\r\n        currentCategory: '',\r\n    });\r\n    // use this to confirm it works!\r\n    console.log(state);\r\n    // state and dispatch are returned by useProductReducer\r\n    // state is most up-to-date version of global state object\r\n    // dispatch is the method to update our state, looks for an ACTION\r\n    // we take state and add it as value to props object\r\n    // this way we can pass more states into the object and use them!\r\n    return <Provider value={[state, dispatch]} {...props} />;\r\n};\r\n\r\n\r\n// this is a custom hook that will take data from StoreProvider\r\nconst useStoreContext = () => {\r\n    return useContext(StoreContext);\r\n};\r\n\r\nexport { StoreProvider, useStoreContext };","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { pluralize } from \"../../utils/helpers\";\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\r\n\r\nfunction ProductItem(item) {\r\n\r\n  // use data from global state\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  // define properties of item\r\n  const {\r\n    image,\r\n    name,\r\n    _id,\r\n    price,\r\n    quantity\r\n  } = item;\r\n\r\n  // define state.cart as cart for easier reading\r\n  const { cart } = state;\r\n\r\n\r\n  // use the dispatch method to execute the ADD_TO_CART action\r\n  const addToCart = () => {\r\n\r\n    // check if cart item matches id \r\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\r\n\r\n    // if _id matches cart item, we will use UPDATE_CART_QUANTITY \r\n    // instead of ADD_TO_CART\r\n    if (itemInCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: _id,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n    }\r\n\r\n    // if id does not match, use ADD_TO_CART\r\n    else {\r\n      dispatch({\r\n      type: ADD_TO_CART,\r\n      product: { ...item, purchaseQuantity: 1 }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"card px-1 py-1\">\r\n      <Link to={`/products/${_id}`}>\r\n        <img\r\n          alt={name}\r\n          src={`/images/${image}`}\r\n        />\r\n        <p>{name}</p>\r\n      </Link>\r\n      <div>\r\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\r\n        <span>${price}</span>\r\n      </div>\r\n      <button onClick={addToCart}>Add to cart</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductItem;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const QUERY_PRODUCTS = gql`\r\n  query getProducts($category: ID) {\r\n    products(category: $category) {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      image\r\n      category {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_ALL_PRODUCTS = gql`\r\n  {\r\n    products {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      category {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_CATEGORIES = gql`\r\n  {\r\n    categories {\r\n      _id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_USER = gql`\r\n  {\r\n    user {\r\n      firstName\r\n      lastName\r\n      orders {\r\n        _id\r\n        purchaseDate\r\n        products {\r\n          _id\r\n          name\r\n          description\r\n          price\r\n          quantity\r\n          image\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useEffect } from 'react';\r\nimport { useQuery } from '@apollo/client';\r\n\r\nimport ProductItem from '../ProductItem';\r\nimport { QUERY_PRODUCTS } from '../../utils/queries';\r\nimport spinner from '../../assets/spinner.gif';\r\n\r\n// import global state function\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\n// import action\r\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\r\n\r\n\r\n// import indexedDB helper function\r\nimport { idbPromise } from \"../../utils/helpers\";\r\n\r\nfunction ProductList() {\r\n\r\n  // create declaration for global state\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  // assign currentCategory to global state\r\n  const { currentCategory } = state;\r\n  \r\n  // we will asign our query data to data variable, and also have loading variable\r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n  \r\n\r\n\r\n  ///////////////////////////////////////////////////////\r\n\r\n  // take data from query and use dispatch method to update global state with data\r\n  useEffect(() => {\r\n\r\n    // if data\r\n    if (data) {\r\n\r\n      // store in global state object\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products\r\n      });\r\n\r\n\r\n      // AND store data in indexedDB cache\r\n      data.products.forEach((product) => {\r\n        \r\n        // note PUT request to update, we store it in 'products' object store\r\n        idbPromise('products', 'put', product);\r\n        \r\n      });\r\n    }\r\n\r\n\r\n    // now we add in capability to retrieve cached data if offline!\r\n    // if loading variable doesnt exist in useQuery hook (offline)\r\n    else if (!loading) {\r\n\r\n      // retrieve cached data\r\n      idbPromise('products', 'get').then((products) => {\r\n\r\n        // set cached data to global state for use\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: products\r\n        });\r\n      });\r\n\r\n    }\r\n\r\n  // the condition is that we have data then we use the dispatch method\r\n  // remember useEffect takes 2 arguments: a function\r\n  // and a condition\r\n  }, [data, loading, dispatch]);\r\n  \r\n\r\n\r\n  //////////////////////////////////////////////////////////////\r\n\r\n  \r\n  function filterProducts() {\r\n\r\n    // if no data then return products\r\n    if (!currentCategory) {\r\n      return state.products;\r\n    }\r\n  \r\n    // take state data and assign currentCategory based on data\r\n    return state.products.filter(product => product.category._id === currentCategory);\r\n  }\r\n\r\n  return (\r\n    <div className=\"my-2\">\r\n      <h2>Our Products:</h2>\r\n      {state.products.length ? (\r\n        <div className=\"flex-row\">\r\n          {filterProducts().map((product) => (\r\n            <ProductItem\r\n              key={product._id}\r\n              _id={product._id}\r\n              image={product.image}\r\n              name={product.name}\r\n              price={product.price}\r\n              quantity={product.quantity}\r\n            />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <h3>You haven't added any products yet!</h3>\r\n      )}\r\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductList;\r\n","import React, {useEffect} from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { QUERY_CATEGORIES } from '../../utils/queries';\r\n\r\n// import globale state variable function\r\nimport { useStoreContext } from \"../../utils/GlobalState\";\r\n\r\n\r\n// import actions\r\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY} from '../../utils/actions';\r\n\r\n// import indexedDB helper function\r\nimport { idbPromise } from '../../utils/helpers';\r\n\r\nfunction CategoryMenu({ setCategory }) {\r\n  \r\n  // we make declaration for globale state variable\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  // assign categories with data from global state variable\r\n  const { categories } = state;\r\n\r\n  // use our QUERY_CATEGORIES query to assign value for data\r\n  // we assign data to variable called categoryData\r\n  // we must also destructure loading variable so we can \r\n  // integrate indexedDB cache retrieval\r\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\r\n\r\n\r\n  // here we take categoryData then use the dispatch() method\r\n  // to populate global state with data\r\n  useEffect(() => {\r\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\r\n    if (categoryData) {\r\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\r\n      dispatch({\r\n        type: UPDATE_CATEGORIES,\r\n        categories: categoryData.categories\r\n      });\r\n\r\n      // we will store each category object in categories cache\r\n      categoryData.categories.forEach(category => {\r\n        idbPromise('categories', 'put', category);\r\n      });\r\n    }\r\n\r\n    // if offline\r\n    else if (!loading) {\r\n      \r\n      // get cached data\r\n      idbPromise('categories', 'get').then(categories => {\r\n        \r\n        // update global state with data\r\n        dispatch({\r\n          type: UPDATE_CATEGORIES,\r\n          categories: categories\r\n        });\r\n      });\r\n    }\r\n  }, [categoryData, loading, dispatch]);\r\n\r\n  const handleClick = id => {\r\n    dispatch({\r\n      type: UPDATE_CURRENT_CATEGORY,\r\n      currentCategory: id\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Choose a Category:</h2>\r\n      {categories.map((item) => (\r\n        <button\r\n          key={item._id}\r\n          onClick={() => {\r\n            handleClick(item._id);\r\n          }}\r\n        >\r\n          {item.name}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoryMenu;\r\n","import React from 'react';\r\n\r\n// we need to update global state data when we remove item from cart\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\r\n\r\nconst CartItem = ({ item }) => {\r\n\r\n  // initiate global state function\r\n  // we only destructured dispatch because CartItem does not need state\r\n  // for some reason COMMA MUST BE HERE OR IT DOESNT WORK!!!\r\n  const [, dispatch ] = useStoreContext();\r\n\r\n\r\n  const removeFromCart = item => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: item._id\r\n    });\r\n  };\r\n\r\n\r\n  // create an onChange function for changing quantity value\r\n  const onChange = (e) => {\r\n    \r\n    const value = e.target.value;\r\n\r\n\r\n    // if value is 0 remove it from the cart\r\n    if (value === '0') {\r\n      dispatch({\r\n        type: REMOVE_FROM_CART,\r\n        _id: item._id\r\n      });\r\n    }\r\n\r\n    // otherwise UPDATE_CART_QUANTITY\r\n    else {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: item._id,\r\n        purchaseQuantity: parseInt(value)\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"flex-row\">\r\n      <div>\r\n        <img\r\n          src={`/images/${item.image}`}\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <div>{item.name}, ${item.price}</div>\r\n        <div>\r\n          <span>Qty:</span>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"1\"\r\n            value={item.purchaseQuantity}\r\n            onChange={onChange}\r\n          />\r\n          <span\r\n            role=\"img\"\r\n            aria-label=\"trash\"\r\n            onClick={() => removeFromCart(item)}\r\n          >\r\n            🗑️\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CartItem;","import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token);\r\n  }\r\n\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import React from 'react';\r\nimport CartItem from '../CartItem';\r\nimport Auth from '../../utils/auth';\r\nimport './style.css';\r\n\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport { TOGGLE_CART } from '../../utils/actions';\r\n\r\nconst Cart = () => {\r\n  \r\n  // we use global state data\r\n  const [ state, dispatch ] = useStoreContext();\r\n\r\n\r\n  // use TOGGLE_CART action with dispatch method\r\n  function toggleCart() {\r\n    dispatch({type: TOGGLE_CART});\r\n  }  \r\n  \r\n\r\n  // function to calculate total price\r\n  function calculateTotal() {\r\n    let sum = 0;\r\n    state.cart.forEach(item => {\r\n      sum += item.price * item.purchaseQuantity;\r\n    });\r\n\r\n    // sets the number of decimal places\r\n    return sum.toFixed(2);\r\n\r\n  }\r\n  \r\n\r\n  // if cart is closed, we will display a different image\r\n  // clicking it will change toggleCart to TRUE\r\n  if (!state.cartOpen) {\r\n    return (\r\n      <div className=\"cart-closed\" onClick={toggleCart}>\r\n        <span\r\n          role=\"img\"\r\n          aria-label=\"trash\">🛒</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  // conditionally render cart if loggedin or not\r\n  // also if cart length is 0 then notify user\r\n  return (\r\n    <div className=\"cart\">\r\n      <div className=\"close\" onClick={toggleCart}>[close]</div>\r\n      <h2>Shopping Cart</h2>\r\n      {state.cart.length ? (\r\n        <div>\r\n          {state.cart.map(item => (\r\n            <CartItem key={item._id} item={item} />\r\n          ))}\r\n          <div className=\"flex-row space-between\">\r\n            <strong>Total: ${calculateTotal()}</strong>\r\n            {\r\n              Auth.loggedIn() ?\r\n                <button>\r\n                  Checkout\r\n                </button>\r\n                :\r\n                <span>(log in to check out)</span>\r\n            }\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <h3>\r\n          <span role=\"img\" aria-label=\"shocked\">\r\n            😱\r\n          </span>\r\n          You haven't added anything to your cart yet!\r\n        </h3>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cart;","import React from \"react\";\r\nimport ProductList from \"../components/ProductList\";\r\nimport CategoryMenu from \"../components/CategoryMenu\";\r\n\r\nimport Cart from '../components/Cart';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <CategoryMenu />\r\n      <ProductList />\r\n      <Cart />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { useQuery } from '@apollo/client';\r\n\r\nimport { QUERY_PRODUCTS } from '../utils/queries';\r\nimport spinner from '../assets/spinner.gif';\r\n\r\nimport { useStoreContext } from \"../utils/GlobalState\";\r\nimport { \r\n  UPDATE_PRODUCTS,\r\n  REMOVE_FROM_CART,\r\n  UPDATE_CART_QUANTITY,\r\n  ADD_TO_CART\r\n} from \"../utils/actions\";\r\n\r\nimport Cart from '../components/Cart';\r\n\r\n\r\n// import IndexedDB helper function\r\nimport { idbPromise } from \"../utils/helpers\";\r\n\r\n\r\n\r\nfunction Detail() {\r\n\r\n  // declare global state info\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  // define id using useParams hook\r\n  const { id } = useParams();\r\n\r\n  // state and setter for useState hook\r\n  const [currentProduct, setCurrentProduct] = useState({})\r\n\r\n  // define data via QUERY_PRODUCTS query, account for loading\r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n  // use global state data for products\r\n  // products data is destructured from state data\r\n  // destructure cart data from state as well\r\n  const { products, cart } = state;\r\n\r\n\r\n  // if there is products data, then use setCurrentProduct setter\r\n  // if not, we use data returned from useQuery to set product data\r\n  // of the global state object\r\n  useEffect(() => {\r\n\r\n    if (products.length) {\r\n      setCurrentProduct(products.find(product => product._id === id));\r\n    } \r\n    \r\n    else if (data) {\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products\r\n      });\r\n\r\n      // store product data in indexedDB cache\r\n      data.products.forEach((product) => {\r\n        idbPromise('products', 'put', product);\r\n      });\r\n    }\r\n\r\n\r\n    // if offline, retrieve data from cache\r\n    else if (!loading) {\r\n      \r\n      idbPromise('products', 'get').then((indexedProducts) => {\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: indexedProducts\r\n        });\r\n      });\r\n\r\n    }\r\n  }, [products, data, loading, dispatch, id]);\r\n\r\n\r\n  // use dispatch method to execute ADD_TO_CART action\r\n  // if id matches item to add, use UPDATE_CART_QUANTITY action\r\n  const addToCart = () => {\r\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\r\n  \r\n    if (itemInCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: id,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n    } \r\n    \r\n    \r\n    else {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        product: { ...currentProduct, purchaseQuantity: 1 }\r\n      });\r\n    }\r\n  };\r\n\r\n  const removeFromCart = () => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: currentProduct._id\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {currentProduct ? (\r\n        <div className=\"container my-1\">\r\n          <Link to=\"/\">← Back to Products</Link>\r\n\r\n          <h2>{currentProduct.name}</h2>\r\n\r\n          <p>{currentProduct.description}</p>\r\n\r\n          <p>\r\n            <strong>Price:</strong>${currentProduct.price}{' '}\r\n            <button onClick={addToCart}>Add to Cart</button>\r\n            <button \r\n              disabled={!cart.find(p=> p._id === currentProduct._id)}\r\n              onClick={removeFromCart}\r\n            >\r\n              Remove from Cart\r\n            </button>\r\n          </p>\r\n\r\n          <img\r\n            src={`/images/${currentProduct.image}`}\r\n            alt={currentProduct.name}\r\n          />\r\n        </div>\r\n      ) : null}\r\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\r\n      <Cart />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Detail;\r\n","import React from \"react\";\r\n\r\nfunction Jumbotron({ children }) {\r\n  return (\r\n    <div\r\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\n\r\nconst NoMatch = () => {\r\n  return (\r\n    <div>\r\n      <Jumbotron>\r\n        <h1>404 Page Not Found</h1>\r\n        <h1>\r\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\r\n            🙄\r\n          </span>\r\n        </h1>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoMatch;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_ORDER = gql`\r\n  mutation addOrder($products: [ID]!) {\r\n    addOrder(products: $products) {\r\n      purchaseDate\r\n      products {\r\n        _id\r\n        name\r\n        description\r\n        price\r\n        quantity\r\n        category {\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser(\r\n    $firstName: String!\r\n    $lastName: String!\r\n    $email: String!\r\n    $password: String!\r\n  ) {\r\n    addUser(\r\n      firstName: $firstName\r\n      lastName: $lastName\r\n      email: $email\r\n      password: $password\r\n    ) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { Link } from 'react-router-dom';\r\nimport { LOGIN } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nfunction Login(props) {\r\n  const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [login, { error }] = useMutation(LOGIN);\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const mutationResponse = await login({\r\n        variables: { email: formState.email, password: formState.password },\r\n      });\r\n      const token = mutationResponse.data.login.token;\r\n      Auth.login(token);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-1\">\r\n      <Link to=\"/signup\">← Go to Signup</Link>\r\n\r\n      <h2>Login</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"email\">Email address:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"******\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        {error ? (\r\n          <div>\r\n            <p className=\"error-text\">The provided credentials are incorrect</p>\r\n          </div>\r\n        ) : null}\r\n        <div className=\"flex-row flex-end\">\r\n          <button type=\"submit\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\nimport Auth from '../utils/auth';\r\nimport { ADD_USER } from '../utils/mutations';\r\n\r\nfunction Signup(props) {\r\n  const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [addUser] = useMutation(ADD_USER);\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const mutationResponse = await addUser({\r\n      variables: {\r\n        email: formState.email,\r\n        password: formState.password,\r\n        firstName: formState.firstName,\r\n        lastName: formState.lastName,\r\n      },\r\n    });\r\n    const token = mutationResponse.data.addUser.token;\r\n    Auth.login(token);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-1\">\r\n      <Link to=\"/login\">← Go to Login</Link>\r\n\r\n      <h2>Signup</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"firstName\">First Name:</label>\r\n          <input\r\n            placeholder=\"First\"\r\n            name=\"firstName\"\r\n            type=\"firstName\"\r\n            id=\"firstName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"lastName\">Last Name:</label>\r\n          <input\r\n            placeholder=\"Last\"\r\n            name=\"lastName\"\r\n            type=\"lastName\"\r\n            id=\"lastName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"email\">Email:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"******\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row flex-end\">\r\n          <button type=\"submit\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Signup;\r\n","import React from \"react\";\r\nimport Auth from \"../../utils/auth\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Nav() {\r\n\r\n  function showNavigation() {\r\n    if (Auth.loggedIn()) {\r\n      return (\r\n        <ul className=\"flex-row\">\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/orderHistory\">\r\n              Order History\r\n            </Link>\r\n          </li>\r\n          <li className=\"mx-1\">\r\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\r\n            <a href=\"/\" onClick={() => Auth.logout()}>\r\n              Logout\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      );\r\n    } else {\r\n      return (\r\n        <ul className=\"flex-row\">\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/signup\">\r\n              Signup\r\n            </Link>\r\n          </li>\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/login\">\r\n              Login\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <header className=\"flex-row px-1\">\r\n      <h1>\r\n        <Link to=\"/\">\r\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\r\n          -Shop-Shop\r\n        </Link>\r\n      </h1>\r\n\r\n      <nav>\r\n        {showNavigation()}\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useQuery } from '@apollo/client';\r\nimport { QUERY_USER } from '../utils/queries';\r\n\r\nfunction OrderHistory() {\r\n  const { data } = useQuery(QUERY_USER);\r\n  let user;\r\n\r\n  if (data) {\r\n    user = data.user;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container my-1\">\r\n        <Link to=\"/\">← Back to Products</Link>\r\n\r\n        {user ? (\r\n          <>\r\n            <h2>\r\n              Order History for {user.firstName} {user.lastName}\r\n            </h2>\r\n            {user.orders.map((order) => (\r\n              <div key={order._id} className=\"my-2\">\r\n                <h3>\r\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\r\n                </h3>\r\n                <div className=\"flex-row\">\r\n                  {order.products.map(({ _id, image, name, price }, index) => (\r\n                    <div key={index} className=\"card px-1 py-1\">\r\n                      <Link to={`/products/${_id}`}>\r\n                        <img alt={name} src={`/images/${image}`} />\r\n                        <p>{name}</p>\r\n                      </Link>\r\n                      <div>\r\n                        <span>${price}</span>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default OrderHistory;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\n\r\nimport Home from './pages/Home';\r\nimport Detail from './pages/Detail';\r\nimport NoMatch from './pages/NoMatch';\r\nimport Login from './pages/Login';\r\nimport Signup from './pages/Signup';\r\nimport Nav from './components/Nav';\r\nimport OrderHistory from './pages/OrderHistory';\r\n\r\n// import storeProvider to import global state variables\r\nimport { StoreProvider } from \"./utils/GlobalState\";\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem('id_token');\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div>\r\n          <StoreProvider>\r\n            <Nav />\r\n            <Routes>\r\n              <Route \r\n                path=\"/\" \r\n                element={<Home />} \r\n              />\r\n              <Route \r\n                path=\"/login\" \r\n                element={<Login />}\r\n              />\r\n              <Route \r\n                path=\"/signup\" \r\n                element={<Signup />} \r\n              />\r\n              <Route \r\n                path=\"/orderHistory\" \r\n                element={<OrderHistory />} \r\n              />\r\n              <Route \r\n                path=\"/products/:id\" \r\n                element={<Detail />}\r\n              />\r\n              <Route \r\n                path=\"*\" \r\n                element={<NoMatch />}\r\n              />\r\n            </Routes>\r\n          </StoreProvider>\r\n        </div>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (\r\n    process.env.NODE_ENV === 'production' &&\r\n    'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}